),label.y = 0.9,
col="blue")+
xlab(expression("winter  "*T[min]*" (°C)"))+
ylab(expression("GPP"[post-bias]*" (%)"))+
# geom_hline(yintercept = 1,lty=2)+
theme(
legend.position = "none",
legend.background = element_blank(),
legend.direction = "horizontal",
legend.text = element_text(size=16),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=26),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white")
)
#plotting
plot_winterT_GPPbias_post<-ggplot()+
geom_point(data = df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim,col=PFT),size=4)+
geom_text_repel(data = df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim,col=PFT,label=sitename),size=4)+
scale_color_manual(values = c("DBF"="orange","MF"="cyan","ENF"="magenta"))+
#update in Jan,2023
# geom_smooth(data=df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim),col="white",se=FALSE,
#             method = "lm",formula = y ~ x,lty=2,fill=adjustcolor("steelblue2",0.2))+
stat_poly_eq(data=df_winterTmin_bias_post,
aes(x=tmin_min,y=gpp_bias_rel_optim,
label = paste(
after_stat(rr.label),
after_stat(p.value.label),
sep = "*\", \"*"),
),label.y = 0.9,
col="blue")+
xlab(expression("winter  "*T[min]*" (°C)"))+
ylab(expression("GPP"[post-bias]*" (%)"))+
# geom_hline(yintercept = 1,lty=2)+
theme(
legend.position = "none",
legend.background = element_blank(),
legend.direction = "horizontal",
legend.text = element_text(size=16),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=26),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white")
)
# plot_fT<-ggarrange(plot_fT_spring,
#         plot_winterT_springfT,plot_winterT_GPPbias,align = "v",
#         nrow = 3,common.legend = TRUE,legend = "bottom")
#plot 1-->not use in Jan, 2023
# plot_fT<-plot_grid(plot_fT_spring,
#                    plot_winterT_springfT,plot_winterT_GPPbias,
#                    labels = c("a","b","c"),
#                    align = "v",
#                    nrow = 3,ncol=1)
#
plot_fT<-plot_grid(plot_winterT_springfT,
plot_winterT_GPPbia_prior,
plot_winterT_GPPbias_post,
labels = c("a","b","c"),
align = "v",
nrow = 3,ncol=1)
ggsave(paste0(save.path,"Figure8_fT_vs_Ta_bias_new.png"),plot_fT,height = 11,width = 9)
#plotting
plot_winterT_GPPbias_post<-ggplot()+
geom_point(data = df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim,col=PFT),size=4)+
geom_text_repel(data = df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim,col=PFT,label=sitename),size=4)+
scale_color_manual(values = c("DBF"="orange","MF"="cyan","ENF"="magenta"))+
#update in Jan,2023
# geom_smooth(data=df_winterTmin_bias_post,aes(x=tmin_min,y=gpp_bias_rel_optim),col="white",se=FALSE,
#             method = "lm",formula = y ~ x,lty=2,fill=adjustcolor("steelblue2",0.2))+
stat_poly_eq(data=df_winterTmin_bias_post,
aes(x=tmin_min,y=gpp_bias_rel_optim,
label = paste(
after_stat(rr.label),
after_stat(p.value.label),
sep = "*\", \"*"),
),label.y = 0.85,
col="blue")+
xlab(expression("winter  "*T[min]*" (°C)"))+
ylab(expression("GPP"[post-bias]*" (%)"))+
# geom_hline(yintercept = 1,lty=2)+
theme(
legend.position = "none",
legend.background = element_blank(),
legend.direction = "horizontal",
legend.text = element_text(size=16),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=26),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white")
)
##merge the plots:
library(cowplot)
# plot_fT<-plot_grid(plot_fT_spring,plot_fT_winterT_springfT,nrow = 2,align = 'hv')
#using ggarrange from ggpubr package:
library(ggpubr)
# plot_fT<-ggarrange(plot_fT_spring,
#         plot_winterT_springfT,plot_winterT_GPPbias,align = "v",
#         nrow = 3,common.legend = TRUE,legend = "bottom")
#plot 1-->not use in Jan, 2023
# plot_fT<-plot_grid(plot_fT_spring,
#                    plot_winterT_springfT,plot_winterT_GPPbias,
#                    labels = c("a","b","c"),
#                    align = "v",
#                    nrow = 3,ncol=1)
#
plot_fT<-plot_grid(plot_winterT_springfT,
plot_winterT_GPPbia_prior,
plot_winterT_GPPbias_post,
labels = c("a","b","c"),
align = "v",
nrow = 3,ncol=1)
#save the plot
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"Figure8_fT_vs_Ta_bias_new.png"),plot_fT,height = 11,width = 9)
#source the function based on Beni:
fun.path<-"./R/"
source(paste0(fun.path,"remove_outliers.R"))
source(paste0(fun.path,"clean_fluxnet_gpp.R"))
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lme4)
library(tidyverse)
# remotes::install_github("computationales/ingestr") #install the package
library(ingestr)
devtools::load_all("D:/Github/rbeni/")
library(rbeni)
#-----------------
#(1) tidy up the data
#load the merged fluxes data and also used the
#phenophases(SOS and POS) extracted to determine the green-up period
#-----------------
#--load the merged fluxes data
load.path<-"./data-raw/raw_data/Merged_data/"
load(paste0(load.path,"Merged_Flux_and_VIs.RDA"))
names(df_merge)
View(df_merge)
plot(df_merge$gpp_dt,df_merge$gpp_nt)
abline(0,1,col="blue")
plot(df_merge$gpp_dt,df_merge$gpp_nt)
abline(0,1,col="blue")
#######################################################
##Aim: improve p-model performance
##both for the early spring and peak season
#######################################################
#At the end, adopt the Mekela et al., 2008 to improve the model representation
#----------
library(tidyverse)
library(dplyr)
library(GenSA)
library(lubridate)
# remotes::install_github("computationales/ingestr") #install the package
library(ingestr)
#-------------------------
#(1)load the data and hardening funciton
#-------------------------
#####
#load the data uploaded by Koen
df_recent <- readRDS(paste0("./data-raw/raw_data/P_model_output/model_data.rds")) %>%
mutate(
year = format(date, "%Y")
) %>%
na.omit()
View(df_recent)
sites<-unique(df_recent$sitename)
#
library(ggplot2)
for (i in 1:length(sites)) {
df_temp<-df_recent %>%
filter(sitename==sites[i])
text.Date<-min(df_temp$date)+c(max(df_temp$date)-min(df_temp$date))*0.1
#
df_plot<-df_temp %>%
ggplot()+
geom_point(aes(x=date,y=gpp))+
geom_point(aes(x=date,y=gpp_mod),col="red")+
annotate(geom = "text",x=text.Date,y=15,label=sites[i])
#
k=quantile(df_temp$gpp,probs = c(0.01,0.05,seq(0.1,0.9,0.1)),0.95,0.99)
df_plot+
geom_hline(yintercept = k,col="blue")
}
#do not filter the observation gpp in study:
df_recent_new<-df_recent
#load the data Beni sent me before:
df_old<-read.csv(file=paste0("./data-raw/raw_data/Data_sent_by_Beni/","ddf_fluxnet2015_pmodel_with_forcings_stocker19gmd.csv"))
View(df_old)
######################################################################
#Aim: to test if the GPP_nt(nighttime partioned) and GPP_dt(daytime partioned)
# differs largely after the filtering their extremes values (removing the upper
#and lower 2.5% quantiles of the difference between GPP values estimated based on these two methods)
######################################################################
#--load the merged fluxes data
load.path<-"./data-raw/raw_data/Merged_data/"
load(paste0(load.path,"Merged_Flux_and_VIs.RDA"))
names(df_merge)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")
######################################################################
#Aim: to test if the GPP_nt(nighttime partioned) and GPP_dt(daytime partioned)
# differs largely after the filtering their extremes values (removing the upper
#and lower 2.5% quantiles of the difference between GPP values estimated based on these two methods)
######################################################################
library(ggpubr)
library(ggplot2)
ggscatter(data=df_merge, x = "gpp_nt", y = "gpp_dt",
color = sitename,add = "reg.line")
ggscatter(data=df_merge, x = "gpp_nt", y = "gpp_dt",
color = "sitename",add = "reg.line")
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* "(g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
lm_stat<-lm(df_merge$gpp_dt~df_merge$gpp_nt,data=df_merge)
lm_stat
summary(lm_stat)
stat.sum<-summary(lm_stat)
stat.sum$r.squared
stat.sum$coefficients
library(ggpmisc)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
stat_poly_line() +
stat_poly_eq() +
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt))+
stat_poly_line() +
stat_poly_eq() +
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt))+
stat_poly_line() +
stat_poly_eq(use_label(c("eq", "R2"))) +
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
library(ggpmisc)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot()+
geom_point(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot()+
geom_point(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_smooth(method = "lm")+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_smooth(method = "lm")+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
coef(lm_stat)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.2)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
unique(df_merge$sitename)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(0,20)
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(0,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
stat.sum
#adding the R2 and linear regression equations:
p_comp+
annotate(geom="text",x=-5,y=20,label = expression("slope = 0.89" * "R"^2*" = 0.78"))
p_comp<-ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(0,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
#adding the R2 and linear regression equations:
p_comp+
annotate(geom="text",x=-5,y=20,label = expression("slope = 0.89" * "R"^2*" = 0.78"))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(0,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=-5,y=20,label = expression("slope = 0.89" * "R"^2*" = 0.78"))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=-5,y=20,label = expression("slope = 0.89" * "R"^2*" = 0.78"))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=-5,y=18,label = expression(paste0("slope = 0.89" * "R"^2*" = 0.78")))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=-5,y=18,label = "a")
round(coef(lm_stat)[2],2)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("slope = ", round(coef(lm_stat)[2],2))+
annotate(geom = "text",x=10.1,y=24,label = paste0("italic(R) ^ 2 == ",round(coef(stat.sum$r.squared),2)),
parse=TRUE,size=5))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("slope = ", round(coef(lm_stat)[2],2))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(coef(stat.sum$r.squared),2)),
parse=TRUE,size=5))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("slope = ", round(coef(lm_stat)[2],2))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("italic(slope) == ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(coef(stat.sum$r.squared),2)),
parse=TRUE,size=5)
round(coef(lm_stat)[2],2))
round(coef(lm_stat)[2],2)
paste0("italic(slope) == ", round(coef(lm_stat)[2],2))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("italic(slope) == ", round(coef(lm_stat)[2],2)))
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("slope = ", round(coef(lm_stat)[2],2)))
paste0("italic(R) ^ 2 == ",round(coef(stat.sum$r.squared),2))
round(coef(stat.sum$r.squared),2)
coef(stat.sum$r.squared)
round(stat.sum$r.squared,2)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("Slope = ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(stat.sum$r.squared,2)),
parse=TRUE,size=5)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("Slope = ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(stat.sum$r.squared,2)),
parse=TRUE)+
theme(
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
)
ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("Slope = ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(stat.sum$r.squared,2)),
parse=TRUE)+
theme(
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
)
#
save.path<-"./test/comp_gpp_nt_and_dt/"
p_comp<-ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("Slope = ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(stat.sum$r.squared,2)),
parse=TRUE)+
theme(
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
)
#
save.path<-"./test/comp_gpp_nt_and_dt/"
ggsave(p_comp,paste0(save.path,"gpp_comparison.png"))
#
save.path<-"./test/comp_gpp_nt_and_dt/"
ggsave(paste0(save.path,"gpp_comparison.png"),p_comp)
p_comp<-ggplot(data=df_merge,aes(x=gpp_nt,y=gpp_dt,col=sitename))+
geom_point()+
xlim(-5,20)+
geom_abline(slope = 1,intercept = 0,lty=2,col="blue")+
geom_abline(slope = coef(lm_stat)[2],intercept = coef(lm_stat)[1],size=1.1)+
labs(y = expression( paste("GPP"[DT]* " (g C m"^-2, " d"^-1, ")" ) ),
x = expression( paste("GPP"[NT]* " (g C m"^-2, " d"^-1, ")" ) ))+
#adding the R2 and linear regression equations:
annotate(geom="text",x=0,y=19,label = paste0("Slope = ", round(coef(lm_stat)[2],2)))+
annotate(geom = "text",x=0,y=17,label = paste0("italic(R) ^ 2 == ",round(stat.sum$r.squared,2)),
parse=TRUE)+
theme(
axis.title = element_text(size=22),
axis.text = element_text(size = 20),
)
#
save.path<-"./test/comp_gpp_nt_and_dt/"
ggsave(paste0(save.path,"gpp_comparison.png"),p_comp)
