panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white")
)
if(para=="tau"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=24,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=15,y=24,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=22,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta",size=5)+
annotate(geom = "text",x=15,y=22,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta",size=5)
}
if(para=="X0"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=5,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=15,y=5,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=4,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta1",size=5)+
annotate(geom = "text",x=15,y=4,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta1",size=5)
}
if(para=="Smax"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=24,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=15,y=24,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=22.5,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta1",size=5)+
annotate(geom = "text",x=15,y=22.5,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta1",size=5)
}
if(do_legend==FALSE){
pars_final<-pars_final+
theme(legend.position = "none")
}
#
return(pars_final)
}
p_tmin_tau<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "tau",TRUE)
p_tmin_X0<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "X0",FALSE)
p_tmin_Smax<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "Smax",FALSE)
#change the x labels:
p_tmin_tau<-p_tmin_tau+
# xlab(expression("T"[min]*" (°C)"))+ylab(expression(tau*""))+
xlab("")+ylab(expression(tau*""))
p_tmin_X0<-p_tmin_X0+
xlab(expression("T"[min]*" (°C)"))+ylab(expression(X[0]*" (°C)"))+
xlab("")+ylab(expression(X[0]*" (°C)"))
p_tmin_Smax<-p_tmin_Smax+
xlab(expression("T"[min]*" (°C)"))+ylab(expression(S[max]*" (°C)"))
#merge the plots:
paras_range<-cowplot::plot_grid(p_tmin_tau,p_tmin_X0,p_tmin_Smax,nrow=3,
ncol = 1,labels = "auto",label_size = 20,align = "hv")
######save the plot###########
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"Figure7_winter_to_geenup_parameters_ranges.png"),paras_range,height = 21,width =10)
plot_paras<-function(df_meteo,df_paras,Env_var,para,do_legend){
# df_meteo<-df_final_new
# df_paras<-data_sel_final
# Env_var<-"tmin"
# para<-"X0"
# do_legend=FALSE
# for example: Tmean vs tau
#I.site-level
df_site_level<-df_meteo %>%
dplyr::select(sitename,classid,koeppen_code,Clim.PFTs,para,tmin,temp)
names(df_site_level)<-c("sitename","PFT","Clim.","Clim.PFTs","para","tmin","tmean")
#
t_pos<-match(Env_var,names(df_site_level))
df_site_level_new<-df_site_level
names(df_site_level_new)[t_pos]<-"Env_var"
#III.PFT level---
df_PFT_level<-df_site_level%>%
mutate(PFT=factor(PFT,levels = c("DBF","MF","ENF")))%>%
group_by(PFT)%>%
dplyr::summarise(tmin=mean(tmin,na.rm=T),
tmean=mean(tmean,na.rm=T))
par_PFT_level<-df_paras[df_paras$flag=="PFT",] %>%
mutate(sitename=NULL,Clim_PFTs=NULL,flag=NULL)%>%
filter(parameter==para)
par_PFT_level<-par_PFT_level[,-1]
names(par_PFT_level)<-c("para","PFT")
#
df_PFT_level_new<-left_join(df_PFT_level,par_PFT_level)
#
t_pos<-match(Env_var,names(df_PFT_level_new))
names(df_PFT_level_new)[t_pos]<-"Env_var"
##----plotting----##
library(ggpmisc)
# library(ggpubr)
#linear regression:
#----DBF------
lm_DBF<-lm(data=df_site_level_new[df_site_level_new$PFT=='DBF',],
para~Env_var)
stat_lm_DBF<-summary(lm_DBF)
stat_DBF_label<-data.frame(r.squared=round(stat_lm_DBF$r.squared,2),
p.value=round(coef(stat_lm_DBF)[2,4],4))
#----Dfc-ENF-----
lm_Dfc_ENF<-lm(data=df_site_level_new[df_site_level_new$Clim.PFTs=='Dfc-ENF',],
para~Env_var)
stat_lm_Dfc_ENF<-summary(lm_Dfc_ENF)
stat_Dfc_ENF_label<-data.frame(r.squared=round(stat_lm_Dfc_ENF$r.squared,2),
p.value=round(coef(stat_lm_Dfc_ENF)[2,4],4))
pars_final<-ggplot()+
geom_point(data=df_site_level_new,aes(x=Env_var,y=para,col=PFT),size=3)+
# scale_color_discrete_sequential(palette = "Viridis")+
geom_text_repel(data=df_site_level_new,aes(x=Env_var,y=para,label=sitename),size=5)+
stat_poly_line(data=df_site_level_new[df_site_level_new$PFT=='DBF',],
aes(x=Env_var,y=para,col=PFT),
fill=adjustcolor("goldenrod1"),method = "lm",formula = y ~ x,lty=2)+
# stat_poly_eq(data=df_site_level_new[df_site_level_new$PFT=='DBF',],
#                aes(x=Env_var,y=para,col=PFT,
#                    label = paste(
#                                  # after_stat(grp.label), "*\"：\"*",
#                                  # after_stat(eq.label), "*\", \"*",
#                                  after_stat(rr.label),
#                                  after_stat(p.value.label),
#                                  sep = "*\", \"*"),
#                    label.x=0.5,label.y="bottom"))+
##update in Nov,2022-->remove the circle
# ggforce::geom_mark_ellipse(data=df_site_level_new[df_site_level_new$PFT=='DBF',],
#     aes(x=Env_var,y=para,label=PFT,group=PFT,col=PFT),label.fill = "goldenrod1",
#     con.border = "one",con.cap = 0,con.size = 1.1,con.colour = "goldenrod1",
#     con.arrow = grid::arrow(angle=30,ends = "last",length = unit(0.1,"inches")))+  ##DBF
stat_poly_line(data=df_site_level_new[df_site_level_new$Clim.PFTs=='Dfc-ENF',],
aes(x=Env_var,y=para,col=PFT),fill=adjustcolor("magenta1"),
method = "lm",formula = y ~ x,lty=2)+
# stat_poly_eq(data=df_site_level_new[df_site_level_new$Clim.PFTs=='Dfc-ENF',],
#                  aes(x=Env_var,y=para,col=PFT,
#                     label = paste(
#                       after_stat(rr.label),
#                       after_stat(p.value.label),
#                       sep = "*\", \"*"),
#                 label.x=0.5,label.y="bottom"))+
##update in Nov,2022-->remove the circle
# ggforce::geom_mark_ellipse(data=df_site_level_new[df_site_level_new$Clim.PFTs=="Dfc-ENF",],
#     aes(x=Env_var,y=para,label=Clim.PFTs,group=Clim.PFTs,col=PFT),label.fill = "magenta1",
#     con.border = "one",con.cap = 0,con.size = 1.1,con.colour = "magenta1",
#     con.arrow = grid::arrow(angle=30,ends = "last",length = unit(0.1,"inches")))+  ##Dfc-ENF
scale_color_manual(values = c("DBF"="orange","MF"="cyan","ENF"="magenta"))+
xlab(paste0(Env_var," (°C)"))+
ylab(paste0(para," (°C)"))+
xlim(-10,15)+
theme(
legend.text = element_text(size=22),
legend.position = c(0.15,0.8),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=26),
axis.text = element_text(size = 22),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white")
)
if(para=="tau"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=24,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=14,y=24,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=22,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta",size=5)+
annotate(geom = "text",x=14,y=22,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta",size=5)
}
if(para=="X0"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=5,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=14,y=5,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=4,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta1",size=5)+
annotate(geom = "text",x=14,y=4,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta1",size=5)
}
if(para=="Smax"){
pars_final<-pars_final+
annotate(geom = "text",x=10.1,y=24,label = paste0("italic(R) ^ 2 == ",
stat_DBF_label$r.squared),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=14,y=24,label = paste0("italic(p) ==",
round(stat_DBF_label$p.value,2)),parse=TRUE,col="orange",size=5)+
annotate(geom = "text",x=10.1,y=22.5,label = paste0("italic(R) ^ 2 == ",
stat_Dfc_ENF_label$r.squared),parse=TRUE,col="magenta1",size=5)+
annotate(geom = "text",x=14,y=22.5,label = paste0("italic(p) == ",
round(stat_Dfc_ENF_label$p.value,2)),parse=TRUE,col="magenta1",size=5)
}
if(do_legend==FALSE){
pars_final<-pars_final+
theme(legend.position = "none")
}
#
return(pars_final)
}
p_tmin_tau<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "tau",TRUE)
p_tmin_X0<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "X0",FALSE)
p_tmin_Smax<-plot_paras(df_meteo = df_final_new,df_paras = data_sel_final,Env_var = "tmin",
para = "Smax",FALSE)
#change the x labels:
p_tmin_tau<-p_tmin_tau+
# xlab(expression("T"[min]*" (°C)"))+ylab(expression(tau*""))+
xlab("")+ylab(expression(tau*""))
p_tmin_X0<-p_tmin_X0+
xlab(expression("T"[min]*" (°C)"))+ylab(expression(X[0]*" (°C)"))+
xlab("")+ylab(expression(X[0]*" (°C)"))
p_tmin_Smax<-p_tmin_Smax+
xlab(expression("T"[min]*" (°C)"))+ylab(expression(S[max]*" (°C)"))
#merge the plots:
paras_range<-cowplot::plot_grid(p_tmin_tau,p_tmin_X0,p_tmin_Smax,nrow=3,
ncol = 1,labels = "auto",label_size = 20,align = "hv")
######save the plot###########
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"Figure7_winter_to_geenup_parameters_ranges.png"),paras_range,height = 21,width =10)
#######################################################
##Aim: improve p-model performance
##both for the early spring and peak season
#######################################################
#calibrated each site separately to improve the model
#-->after set the iteration to 5000, the model improved substantially
#----------
library(tidyverse)
library(lubridate)
#-------------------------
#(1)load the data and hardening funciton
#-------------------------
#####
#load the data uploaded by Koen
df_recent <- readRDS(paste0("./data-raw/raw_data/P_model_output/model_data.rds")) %>%
mutate(
year = format(date, "%Y")
) %>%
na.omit()
#
# sites<-unique(df_recent$sitename)
# for (i in 1:length(sites)) {
#   df_temp<-df_recent %>%
#     filter(sitename==sites[i])
#   text.Date<-min(df_temp$date)+c(max(df_temp$date)-min(df_temp$date))*0.1
#   df_temp %>%
#     ggplot()+
#     geom_point(aes(x=date,y=gpp))+
#     geom_point(aes(x=date,y=gpp_mod),col="red")+
#     annotate(geom = "text",x=text.Date,y=15,label=sites[i])
# }
#do not filter the observation gpp in study:
df_recent_new<-df_recent
#load the data Beni sent me before:
df_old<-read.csv(file=paste0("./data-raw/raw_data/Data_sent_by_Beni/","ddf_fluxnet2015_pmodel_with_forcings_stocker19gmd.csv"))
df_old<-df_old %>%
mutate(date=lubridate::mdy(date),
year=lubridate::year(date)) %>%
na.omit(gpp_obs)
#####
# source(paste0("./R/functions_in_model/model_hardening_byBeni_addbaseGDD_rev.R"))
source(paste0("./R/functions_in_model/newly_formulated_fun/model_fT_rev.R"))
#--------------------------------------------------------------
#(2) retreive the optimized parameter for the selected sites
#--------------------------------------------------------------
# set initial value
par <- c("tau"=5,"X0"=-10,"Smax"=5,"k"=1)
#
lower=c(1,-10,5,0)
upper=c(25,10,25,2)
# run model and compare to true values
# returns the RMSE
cost <- function(
data,
par
) {
scaling_factor <- data %>%
# group_by(sitename) %>%
do({
scaling_factor <- f_Ts_rev(
.,
par
)
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor = scaling_factor
)
})
df <- left_join(data, scaling_factor)
#rmse
# rmse <- sqrt(
#   sum(
#     (df$gpp - df$gpp_mod * df$scaling_factor)^2)
#   )/nrow(df)
#mse:mean square error
mse<-mean((df$gpp - df$gpp_mod * df$scaling_factor)^2,na.rm=T)
#mae:mean absolute error:
# mae<-sum(abs(df$gpp - df$gpp_mod * df$scaling_factor))/nrow(df)
# This visualizes the process,
# comment out when running for real
# plot(df$gpp, type = 'p',ylim=c(0,12))
# lines(df$gpp_mod, col = "red")
# lines(df$gpp_mod * df$scaling_factor, col = "blue",cex=1.2)
# Sys.sleep(0.1)
return(mse)
}
#--------------------------------------------------------------
#(3) optimize for each site
#--------------------------------------------------------------
#first load the PFTs information:
#load the modis data-->tidy from Beni
load(paste0("./data-raw/raw_data/sites_info/","Pre_selected_sites_info.RDA"))
sites.info<-df_sites_sel
#
df_merge<-df_recent_new %>%
left_join(
sites.info,
by = "sitename"
)
##adding day of the year
df_merge$doy<-yday(df_merge$date)
#main Clim-PFTs
df_merge$Clim_PFTs<-paste0(df_merge$koeppen_code,"-",df_merge$classid)
Clim.PFTs<-sort(unique(df_merge$Clim_PFTs))
#------------------------------------------
#normalized the GPP-->for each site,
#normalized the "gpp" and "gpp_mod" through their 90 percentiles
#------------------------------------------
#I should use the same value to normlize the gpp and gpp_mod:
gpp_P95<-df_merge %>%
group_by(sitename) %>%
dplyr::summarise(gpp_norm_p95=quantile(c(gpp,gpp_mod),0.95,na.rm=T))
#
df_merge.new<-left_join(df_merge,gpp_P95,by="sitename")
df_merge.new<-df_merge.new %>%
mutate(gpp=gpp/gpp_norm_p95,gpp_mod=gpp_mod/gpp_norm_p95)
# need to remove the sites that do not used in this analysis:
rm.sites<-c("BE-Bra","CA-SF1","CA-SF2","FI-Sod","US-Wi4")
df_merge_new<-df_merge.new %>%
filter(sitename!=rm.sites[1] & sitename!=rm.sites[2]&sitename!=rm.sites[3]&sitename!=rm.sites[4]&sitename!=rm.sites[5])
sel_sites<-unique(df_merge_new$sitename)
# optimize for each site
library(tictoc)#-->record the parameterization time
tic("start to parameterize")
par_mutisites<-c()
for(i in 1:length(sel_sites)){
df_sel<-df_merge_new %>%
dplyr::filter(sitename==sel_sites[i])
optim_par <- GenSA::GenSA(
par = par,
fn = cost,
data = df_sel,
lower = lower,
upper = upper,
control = list(max.call=5000))$par
print(i)
par_mutisites[[i]]<-optim_par
}
library(tictoc)#-->record the parameterization time
tic("start to parameterize")
par_mutisites<-c()
for(i in 1:length(sel_sites)){
df_sel<-df_merge_new %>%
dplyr::filter(sitename==sel_sites[i])
optim_par <- GenSA::GenSA(
par = par,
fn = cost,
data = df_sel,
lower = lower,
upper = upper,
control = list(max.call=5000))$par
print(i)
par_mutisites[[i]]<-optim_par
}
print("finish parameterization")
toc()
#
names(par_mutisites)<-sel_sites
print(par_mutisites)
# save the optimized data
save(par_mutisites,file = paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite_new.rds"))
#--------------------------------------------------------------
#(4) compare the gpp_obs, ori modelled gpp, and gpp modelled using optimated parameters
#--------------------------------------------------------------
t1<-par_mutisites
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite.rds"))
t2<-par_mutisites
#a.get the stress factor(calibration factor) for each site
df_final<-c()
for (i in 1:length(sel_sites)) {
df_sel<-df_merge_new %>%
dplyr::filter(sitename==sel_sites[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
# scaling_factor <- f_Ts_rev(.,par_mutisites[[i]])
scaling_factor <- f_Ts_rev(.,t1[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final<-rbind(df_final,df_sel)
}
gc()
#-----------------------------
#need to back-convert the normalized gpp to gpp
#-----------------------------
df_final_new<-df_final %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95)
#b.make evaluation plots
#!!first need to merge the modelled gpp from different sources:
df_final_new$year<-lubridate::year(df_final_new$date)
df_final_new<-left_join(df_final_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_old_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#--------------------------
#5.modelled and observed gpp:scatter plots
#-------------------------
plot_modobs_general<-c()
df_modobs<-c()
for(i in 1:length(sel_sites)){
df_modobs_each<-df_final_new %>%
filter(sitename==sel_sites[[i]])%>%
select(sitename,date,gpp_obs_recent,gpp_mod_old_ori,gpp_mod_recent_ori,gpp_mod_recent_optim) %>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_recent_ori=gpp_mod_recent_ori,
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%
mutate(gpp_obs_recent=NULL)
#
df_modobs<-rbind(df_modobs,df_modobs_each)
# #scatter plots to compare the model and observation gpp
# gpp_modobs_comp1<-df_modobs_each %>%
#   analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
# gpp_modobs_comp2<-df_modobs_each %>%
#   analyse_modobs2("gpp_mod_recent_ori", "gpp_obs", type = "heat")
# gpp_modobs_comp3<-df_modobs_each %>%
#   analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
# # add the site-name:
# gpp_modobs_comp1$gg<-gpp_modobs_comp1$gg+
#   annotate(geom="text",x=15,y=0,label=sel_sites[i])
# gpp_modobs_comp2$gg<-gpp_modobs_comp2$gg+
#   annotate(geom="text",x=15,y=0,label=sel_sites[i])
# gpp_modobs_comp3$gg<-gpp_modobs_comp3$gg+
#   annotate(geom="text",x=15,y=0,label=sel_sites[i])
#
# #merge two plots
# evaulation_merge_plot<-plot_grid(gpp_modobs_comp1$gg,
#                                  gpp_modobs_comp2$gg,gpp_modobs_comp3$gg,
#                                  widths=15,heights=4,
#                                  labels = "auto",ncol =3,nrow = 1,label_size = 12,align = "hv")
# # plot(evaulation_merge_plot)
#
# # put all the plots together:
# plot_modobs_general[[i]]<-evaulation_merge_plot
}
#   pivot_longer(c(obs,mod_old_ori,mod_recent_ori,mod_recent_optim), names_to = "Source", values_to = "gpp") %>%
#   ggplot(aes(doy, gpp, color = Source)) +
#   geom_line() +
#   scale_color_manual(values = c("mod_old_ori" = "red","mod_recent_ori"="steelblue2",
#                                 "mod_recent_optim" = "orange", "obs" = "black"),
#                      labels = c("Old P-model","Recent Ori P-model", "Recent Optim P-model","Obs.")) +
#   labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
#        x = "Day of year") +
#   facet_wrap(~sitename)
#update using original p-model
season_plot<-df_modobs %>%
mutate(doy = lubridate::yday(date)) %>%
group_by(sitename, doy) %>%
dplyr::summarise(obs = mean(gpp_obs, na.rm = TRUE),
mod_old_ori=mean(gpp_mod_old_ori, na.rm = TRUE),
mod_recent_ori=mean(gpp_mod_recent_ori, na.rm = TRUE),
mod_recent_optim=mean(gpp_mod_recent_optim,na.rm = TRUE)) %>%
pivot_longer(c(obs,mod_old_ori,mod_recent_optim), names_to = "Source", values_to = "gpp") %>%
ggplot(aes(doy, gpp, color = Source)) +
geom_line() +
scale_color_manual("GPP sources",values = c("mod_old_ori" = "tomato",
"mod_recent_optim" = "dodgerblue", "obs" = "gray4"),
labels = c("Orig. P-model", "Accli. P-model","Observations")) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
facet_wrap(~sitename)+
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.05)
)
####
#save the plot
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"FigureS_pmodel_vs_obs_foreachsite_fT_new.png"),season_plot,width = 20,height = 20)
