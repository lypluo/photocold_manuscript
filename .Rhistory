legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.05)
)+
theme(legend.text.align = 0)  #align the legend (all the letter start at the same positoin)
plot_sites<-df_meandoy_norm %>%
filter(!is.nan(gpp_lmer) & !is.infinite(gpp_lmer))%>% ##this filter is important
pivot_longer(c(gpp_obs, gpp_pmodel, gpp_lue_const, gpp_temp_vpd,gpp_lmer), names_to = "model", values_to = "gpp") %>%
mutate(model = fct_relevel(model, "gpp_obs", "gpp_pmodel", "gpp_lue_const", "gpp_temp_vpd","gpp_lmer")) %>%
dplyr::filter((model %in% c( "gpp_obs", "gpp_pmodel","gpp_lmer"))) %>%  ##only select one model
# pivot_longer(c(gpp_obs, gpp_pmodel, gpp_lue_const, gpp_temp_vpd), names_to = "model", values_to = "gpp") %>%
# mutate(model = fct_relevel(model, "gpp_obs", "gpp_pmodel", "gpp_lue_const", "gpp_temp_vpd")) %>%
# dplyr::filter((model %in% c( "gpp_obs", "gpp_pmodel", "gpp_temp_vpd"))) %>%
# filter(sitename=="US-UMB")%>%
ggplot() +
# geom_ribbon(
#   aes(x = doy, ymin = obs_min, ymax = obs_max),
#   fill = "black",
#   alpha = 0.2
#   ) +
geom_line(aes(x = doy, y = gpp, color = model)) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
facet_wrap( ~sitename) +
# theme_gray() +
scale_color_manual("GPP sources",values = c("gpp_obs" = "black",
"gpp_pmodel" = "red","gpp_lmer"="dodgerblue"),
labels = c(expression(GPP[obs]),expression(GPP[Pmodel]),expression(GPP[LME])))+
# labels = c("Obervations","P-model","LME"))+
# scale_color_manual(
#   name="Model: ",
#   values=c("black", "red", "royalblue", "darkgoldenrod", "springgreen", "orchid4")
# )
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.05)
)+
theme(legend.text.align = 0)  #align the legend (all the letter start at the same positoin)
# ggsave("./manuscript/test_files/gpp_meandoy_norm.pdf", height = 25, width = 8)
ggsave("./manuscript/figures/FigS_eachsite_gpp_meandoy_norm.png",width = 20,height = 20)
####################
#(5)prepare the official plots:
#using norm_GPP results
####################
#----------------Figure :plotting for
#load the site infos:
load(paste0("./data-raw/raw_data/sites_info/","Pre_selected_sites_info.RDA"))
sites.info<-df_sites_sel;rm(df_sites_sel)
#
ddf_norm<-left_join(ddf_norm,sites.info)
ddf_norm<-ddf_norm %>%
mutate(Clim_PFTs=paste0(koeppen_code,"-",classid))
#check sites in different Clim.-PFTs
sites.info%>%
mutate(Clim_PFTs=paste0(koeppen_code,"-",classid)) %>%
select(sitename,Clim_PFTs)%>%
# filter(Clim_PFTs=="Cfa-ENF")
filter(Clim_PFTs=="Dfb-ENF")
df_meandoy_norm_Clim_PFTs <- ddf_norm %>%
filter(sitename!="JP-MBF" & sitename!="US-NR1" & sitename!="US-PFa")%>% ##remove the sites do not performed when lmer
group_by(Clim_PFTs, doy) %>%
dplyr::summarise(across(starts_with("gpp_"), mean, na.rm = TRUE))
#Figure for Clim.-PFTs
plot_final<-df_meandoy_norm_Clim_PFTs %>%
filter(!is.nan(gpp_lmer) & !is.infinite(gpp_lmer))%>% ##this filter is important
pivot_longer(c(gpp_obs, gpp_pmodel, gpp_lue_const, gpp_temp_vpd,gpp_lmer), names_to = "model", values_to = "gpp") %>%
mutate(model = fct_relevel(model, "gpp_obs", "gpp_pmodel", "gpp_lue_const", "gpp_temp_vpd","gpp_lmer")) %>%
dplyr::filter((model %in% c( "gpp_obs", "gpp_pmodel","gpp_lmer"))) %>% ##select only one lm
ggplot() +
geom_line(aes(x = doy, y = gpp, color = model)) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
# facet_wrap( ~Clim_PFTs, ncol = 3, scales = "free_y" ) +
facet_wrap( ~Clim_PFTs) +
# theme_gray() +
# theme(legend.position = "bottom") +
# scale_color_manual(
#   name="Model: ",
#   values=c("black", "red", "royalblue", "darkgoldenrod", "springgreen", "orchid4"))+
scale_color_manual("GPP sources",values = c("gpp_obs" = "black",
"gpp_pmodel" = "red", "gpp_lmer" = "dodgerblue"),
labels = c("Observations","P-model","LME")) +
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.1)
)
df_meandoy_norm_Clim_PFTs %>%
filter(!is.nan(gpp_lmer) & !is.infinite(gpp_lmer))%>% ##this filter is important
pivot_longer(c(gpp_obs, gpp_pmodel, gpp_lue_const, gpp_temp_vpd,gpp_lmer), names_to = "model", values_to = "gpp") %>%
mutate(model = fct_relevel(model, "gpp_obs", "gpp_pmodel", "gpp_lue_const", "gpp_temp_vpd","gpp_lmer")) %>%
dplyr::filter((model %in% c( "gpp_obs", "gpp_pmodel","gpp_lmer"))) %>% ##select only one lm
ggplot() +
geom_line(aes(x = doy, y = gpp, color = model)) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
# facet_wrap( ~Clim_PFTs, ncol = 3, scales = "free_y" ) +
facet_wrap( ~Clim_PFTs) +
# theme_gray() +
# theme(legend.position = "bottom") +
# scale_color_manual(
#   name="Model: ",
#   values=c("black", "red", "royalblue", "darkgoldenrod", "springgreen", "orchid4"))+
scale_color_manual("GPP sources",values = c("gpp_obs" = "black",
"gpp_pmodel" = "red", "gpp_lmer" = "dodgerblue"),
labels = c(expression(GPP[obs]),expression(GPP[Pmodel]),expression(GPP[LME])))+
# labels = c("Observations","P-model","LME")) +
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.1)
)+
theme(legend.text.align = 0)  #align the legend (al
#Figure for Clim.-PFTs
plot_final<-df_meandoy_norm_Clim_PFTs %>%
filter(!is.nan(gpp_lmer) & !is.infinite(gpp_lmer))%>% ##this filter is important
pivot_longer(c(gpp_obs, gpp_pmodel, gpp_lue_const, gpp_temp_vpd,gpp_lmer), names_to = "model", values_to = "gpp") %>%
mutate(model = fct_relevel(model, "gpp_obs", "gpp_pmodel", "gpp_lue_const", "gpp_temp_vpd","gpp_lmer")) %>%
dplyr::filter((model %in% c( "gpp_obs", "gpp_pmodel","gpp_lmer"))) %>% ##select only one lm
ggplot() +
geom_line(aes(x = doy, y = gpp, color = model)) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
# facet_wrap( ~Clim_PFTs, ncol = 3, scales = "free_y" ) +
facet_wrap( ~Clim_PFTs) +
# theme_gray() +
# theme(legend.position = "bottom") +
# scale_color_manual(
#   name="Model: ",
#   values=c("black", "red", "royalblue", "darkgoldenrod", "springgreen", "orchid4"))+
scale_color_manual("GPP sources",values = c("gpp_obs" = "black",
"gpp_pmodel" = "red", "gpp_lmer" = "dodgerblue"),
labels = c(expression(GPP[obs]),expression(GPP[Pmodel]),expression(GPP[LME])))+
# labels = c("Observations","P-model","LME")) +
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
# legend.background = element_blank(),
legend.position = c(0.75,0.1)
)+
theme(legend.text.align = 0)  #align the legend (all the letter start at the same positoin)
ggsave("./manuscript/figures/Figure1_gpp_meandoy_norm_forClimPFTs.png",plot_final,width = 15,height = 10)
#################################################
#Aim:to evaluate the model performances with the parameters from the model
#calibrated on the different scale
#(each site(site-level), PFT scale(PFT-level), pool all the sites together(All sites-level))
#################################################
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lme4)
library(tidyverse)
# remotes::install_github("computationales/ingestr") #install the package
library(ingestr)
devtools::load_all("D:/Github/rbeni/")
library(rbeni)
#-------------------------
#(1)load the data and hardening funciton
#-------------------------
#####
#load the data uploaded by Koen
df_recent <- readRDS(paste0("./data-raw/raw_data/P_model_output/model_data.rds")) %>%
mutate(
year = format(date, "%Y")
) %>%
na.omit()
#load the data Beni sent me before:
df_old<-read.csv(file=paste0("./data-raw/raw_data/Data_sent_by_Beni/","ddf_fluxnet2015_pmodel_with_forcings_stocker19gmd.csv"))
df_old<-df_old %>%
mutate(date=lubridate::mdy(date),
year=lubridate::year(date)) %>%
na.omit(gpp_obs)
#load the temperature acclimation factor fT:
# source(paste0("./R/functions_in_model/model_hardening_byBeni_addbaseGDD_rev.R"))
source(paste0("./R/functions_in_model/newly_formulated_fun/model_fT_rev.R"))
#--------------------------------------------------------------
#(2) retreive the optimized parameter for the sites
#--------------------------------------------------------------
# set initial value
par <- c("tau"=5,"X0"=-10,"Smax"=5,"k"=1)
#
lower=c(1,-10,5,0)
upper=c(25,10,25,2)
# run model and compare to true values
# returns the RMSE
cost <- function(
data,
par
) {
scaling_factor <- data %>%
# group_by(sitename) %>%
do({
scaling_factor <- f_Ts_rev(
.,
par
)
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor = scaling_factor
)
})
df <- left_join(data, scaling_factor)
#rmse
# rmse <- sqrt(
#   sum(
#     (df$gpp - df$gpp_mod * df$scaling_factor)^2)
#   )/nrow(df)
#mse:mean square error
mse<-mean((df$gpp - df$gpp_mod * df$scaling_factor)^2,na.rm=T)
return(mse)
}
#--------------------------------------------------------------
#(3) parameters optimization (for site-level, PFT-level, and All-sites level)
#--------------------------------------------------------------
#a.adding the PFTs information for site-->load the modis data-->tidy from Beni
load(paste0("./data-raw/raw_data/sites_info/","Pre_selected_sites_info.RDA"))
sites.info<-df_sites_sel
#
df_merge<-df_recent %>%
left_join(
sites.info,
by = "sitename"
)
##adding day of the year
df_merge$doy<-yday(df_merge$date)
#main Clim-PFTs
df_merge$Clim_PFTs<-paste0(df_merge$koeppen_code,"-",df_merge$classid)
Clim.PFTs<-sort(unique(df_merge$Clim_PFTs))
#------------------------------------------
#b.normalized the GPP-->for each site,
#normalized the "gpp" and "gpp_mod" through their 90 percentiles
#------------------------------------------
#I should use the same value to normlize the gpp and gpp_mod:
gpp_P95<-df_merge %>%
group_by(sitename) %>%
dplyr::summarise(gpp_norm_p95=quantile(c(gpp,gpp_mod),0.95,na.rm=T))
#
df_merge.new<-left_join(df_merge,gpp_P95,by="sitename")
df_merge.new<-df_merge.new %>%
mutate(gpp=gpp/gpp_norm_p95,gpp_mod=gpp_mod/gpp_norm_p95)
# need to remove the sites that do not used in this analysis:
rm.sites<-c("BE-Bra","CA-SF1","CA-SF2","FI-Sod","US-Wi4")
df_merge_new<-df_merge.new %>%
filter(sitename!=rm.sites[1] & sitename!=rm.sites[2]&sitename!=rm.sites[3]&sitename!=rm.sites[4]&sitename!=rm.sites[5])
#------------------------
#c.optimization:
#-----------------------
#this step is done in other script, save the parameterized parameters in the folder..
#....
#--------------------------------------------------------------
#(4) compare the gpp_obs, ori modelled gpp, and gpp modelled
# using optimated parameters calibrated on different scale(for site-level, PFT-level, and All-sites level)
#--------------------------------------------------------------
#---a.load the optimized parameters from different scales
# site-level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite.rds"))
#PFT-level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_PFTs.rds"))
#All-sites level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_allsites.rds"))
#---b.retrieve the stress factor(calibration factor) for each scale-level
#--------
#for optimized paramater from site-level calibration:
#--------
sel_sites<-unique(df_merge_new$sitename)
df_final_sitelevel<-c()
for (i in 1:length(sel_sites)) {
df_sel<-df_merge_new %>%
dplyr::filter(sitename==sel_sites[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_mutisites[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_sitelevel<-rbind(df_final_sitelevel,df_sel)
}
#--------
#for optimized paramater from PFT-level calibration:
#--------
PFTs<-unique(df_merge_new$classid)
df_final_PFTlevel<-c()
for (i in 1:length(PFTs)) {
df_sel<-df_merge_new %>%
dplyr::filter(classid==PFTs[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_PFTs[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel_new <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_PFTlevel<-rbind(df_final_PFTlevel,df_sel_new)
}
#--------
#for optimized paramater from All sites-level calibration:
#--------
df_final_Allsiteslevel<-c()
#
df_sel<-df_merge_new
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_allsites)
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel_new <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_Allsiteslevel<-df_sel_new
#-----------------------------
#---c.need to back-convert the normalized gpp to gpp
#-----------------------------
#for site-level:
df_final_sitelevel_new<-df_final_sitelevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_sitelevel<-left_join(df_final_sitelevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#for PFT-level:
df_final_PFTlevel_new<-df_final_PFTlevel_new %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
#for PFT-level:
df_final_PFTlevel_new<-df_final_PFTlevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_PFTlevel<-left_join(df_final_PFTlevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#for Allsites-level:
df_final_Allsiteslevel_new<-df_final_Allsiteslevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_Allsiteslevel<-left_join(df_final_Allsiteslevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
names(df_merge_Allsiteslevel)
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
plot_modobs_general<-c()
df_modobs<-c()
View(df_merge_sitelevel)
names(df_merge_sitelevel)
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
###############################
#----a.making scatter plots:
###############################
#for the site-level comparision(pooled all sites for this scatter plot):
df_modobs_sitelevel<-df_merge_sitelevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)
df_modobs_each %>%
analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
names(df_modobs_sitelevel)
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
###############################
#----a.making scatter plots:
###############################
#for the site-level comparision(pooled all sites for this scatter plot):
df_modobs_sitelevel<-df_merge_sitelevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
names(df_modobs_sitelevel)
df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
#
plot_gpp_modobs_sitelevel<-df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
#for the PFT-level comparision(pooled all sites for this scatter plot):
df_modobs_PFTlevel<-df_merge_PFTlevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
#
plot_gpp_modobs_PFTlevel<-df_modobs_PFTlevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
plot_gpp_modobs_PFTlevel
#for the Allsites-level comparision(pooled all sites for this scatter plot):
df_modobs_Allsiteslevel<-df_merge_Allsiteslevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
df_modobs_Allsiteslevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
#
plot_gpp_modobs_Allsiteslevel<-df_modobs_Allsiteslevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
plot_grid(plot_gpp_modobs_sitelevel$gg,
plot_gpp_modobs_PFTlevel$gg,plot_gpp_modobs_Allsiteslevel$gg,
widths=15,heights=4,
labels = "auto",ncol =3,nrow = 1,label_size = 12,align = "hv")
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
library(ggpubr)
??plot_grid
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
library(cowplot)
library(ggplot2)
#!!this part needs to write a new function to plot the scatter plots:
#merge the plots
evaulation_merge_plot<-plot_grid(plot_gpp_modobs_sitelevel$gg,
plot_gpp_modobs_PFTlevel$gg,plot_gpp_modobs_Allsiteslevel$gg,
widths=15,heights=4,
labels = "auto",ncol =3,nrow = 1,label_size = 12,align = "hv")
plot(evaulation_merge_plot)
evaulation_merge_plot
