dplyr::filter(classid==PFTs[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_PFTs[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel_new <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final<-rbind(df_final,df_sel_new)
}
#-----------------------------
#need to back-convert the normalized gpp to gpp
#-----------------------------
df_final_new<-df_final %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95)
#b.make evaluation plots
#!!first need to merge the modelled gpp from different sources:
df_final_new$year<-lubridate::year(df_final_new$date)
df_merge_new<-left_join(df_final_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#
###########test for ts of temp,tmin and tmax############
#Ta.....
df_merge_new %>%
mutate(doy = lubridate::yday(date)) %>%
group_by(classid,doy) %>%
# group_by(sitename,doy) %>%
dplyr::summarise(gpp_obs=mean(gpp_obs_recent,na.rm=T),
mean_Ta=mean(temp,na.rm=T),
mean_Tmin=mean(tmin,na.rm=T),
mean_Tmax=mean(tmax,na.rm=T),
VPD=mean(vpd,na.rm=T),
mean_prec=mean(prec,na.rm=T))%>%
pivot_longer(c(mean_Ta,mean_Tmin,mean_Tmax),
names_to = "Ta_source",values_to = "Ta") %>%
ggplot(aes(doy,Ta,color = Ta_source))+
geom_line()+
facet_grid(~classid)
# facet_grid(~sitename)
### make evaluation plots
#(1) For General plots
# devtools::load_all("D:/Github/rbeni/")
# library(rbeni) #-->make the evaluation plot
library(rbeni)
library(cowplot)
library(grid)
#--------------------------
#modelled and observed gpp:scatter plots-->errors occur, need to find out the reasons later (2022-May,04)
#-------------------------
#source the function:analyse_modobs2
# source(file = "./R/functions_from_beni/analyse_modobs2.R")
plot_modobs_general<-c()
df_modobs<-c()
for(i in 1:length(PFTs)){
#
df_modobs_each<-df_merge_new %>%
filter(classid==PFTs[i]) %>%
select(sitename,date,classid,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim) %>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,
gpp_mod_recent_ori=gpp_mod_recent_ori,
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
#
df_modobs<-rbind(df_modobs,df_modobs_each)
#some setting-->only compare when both gpp_obs and gpp_mod_old_ori are available:
# df_modobs_each<-df_modobs_each[!is.nan(df_modobs_each$gpp_mod_old_ori) & !is.nan(df_modobs_each$gpp_obs),]
# #scatter plots to compare the model and observation gpp
# gpp_modobs_comp1<-df_modobs_each %>%
#   analyse_modobs2("gpp_mod_old_ori", "gpp_obs", type = "heat")
# # gpp_modobs_comp2<-df_modobs_each %>%
# #   analyse_modobs2("gpp_mod_recent_ori", "gpp_obs", type = "heat")
# gpp_modobs_comp3<-df_modobs_each %>%
#   analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
# # add the site-name:
# gpp_modobs_comp1$gg<-gpp_modobs_comp1$gg+
#   annotate(geom="text",x=15,y=0,label=PFTs[i])
# gpp_modobs_comp2$gg<-gpp_modobs_comp2$gg+
#   annotate(geom="text",x=15,y=0,label=PFTs[i])
# gpp_modobs_comp3$gg<-gpp_modobs_comp3$gg+
#   annotate(geom="text",x=15,y=0,label=PFTs[i])
#
# #merge two plots
# if(PFTs[i]=="ENF"){
#   p1<-gpp_modobs_comp1$gg+
#     ylab(expression("GPP"[EC]*" (g C m"^-2*" d"^-1*")"))+
#     xlab(expression("GPP"[Orig.P-model]*" (g C m"^-2*" d"^-1*")"))+
#     annotate(geom="text",x=0,y=20,label="e")
#
#   p3<-gpp_modobs_comp3$gg+
#     ylab("")+
#     xlab(expression("GPP"[Cali.P-model]*" (g C m"^-2*" d"^-1*")"))+
#     annotate(geom="text",x=0,y=20,label="f")
# }
# if(PFTs[i]=="DBF"){
#   p1<-gpp_modobs_comp1$gg+
#     ylab(expression("GPP"[EC]*" (g C m"^-2*" d"^-1*")"))+
#     xlab("")+
#     annotate(geom="text",x=0,y=20,label="a")
#
#   p3<-gpp_modobs_comp3$gg+
#     ylab("")+
#     xlab("")+
#     annotate(geom="text",x=0,y=20,label="b")
# }
# if(PFTs[i]=="MF"){
#   p1<-gpp_modobs_comp1$gg+
#     ylab(expression("GPP"[EC]*" (g C m"^-2*" d"^-1*")"))+
#     xlab("")+
#     annotate(geom="text",x=0,y=20,label="c")
#
#   p3<-gpp_modobs_comp3$gg+
#     ylab("")+
#     xlab("")+
#     annotate(geom="text",x=0,y=20,label="d")
# }
#
# evaulation_merge_plot<-plot_grid(p1,p3,
#                                  widths=15,heights=4,
#                                  ncol =2,nrow = 1,label_size = 12,align = "hv")
# # plot(evaulation_merge_plot)
#
# #put all the plots together:
# plot_modobs_general[[i]]<-evaulation_merge_plot
}
# names(plot_modobs_general)<-PFTs
#print the plot
# p_scatterplot_all<-plot_grid(plot_modobs_general$DBF,
#                              plot_modobs_general$MF,
#                              plot_modobs_general$ENF,nrow = 3)
#
# tag_facet <- function(p, open = "", close = "", tag_pool = letters, x = -Inf, y = Inf,
#                       hjust = -0.5, vjust = 1.5, fontface = 2, family = "", ...) {
#
#   gb <- ggplot_build(p)
#   lay <- gb$layout$layout
#   tags <- cbind(lay, label = paste0(open, tag_pool[lay$PANEL], close), x = x, y = y)
#   p + geom_text(data = tags, aes_string(x = "x", y = "y", label = "label"), ..., hjust = hjust,
#                 vjust = vjust, fontface = fontface, family = family, inherit.aes = FALSE)
# }
# library(egg)
# comp.labels<-data.frame(
#   x=rep(1,6),
#   y=rep(15,6),
#   label=c("a","b","c","d","e","f")
# )
# p_scatterplot_all<-tag_facet(p_scatterplot_all,x=comp.labels$x,y=comp.labels$y,
#                            tag_pool = comp.labels$label,size=5)
# print(p_scatterplot_all)
#save the plot
# save.path<-"./manuscript/figures/"
# ggsave(paste0(save.path,"FigureS_pmodel_vs_obs_scatterplot.png"),p_scatterplot_all,width = 10,height = 15)
#(2) For Seasonality
#a. Seasonal course for different PFTs:
#plotting:
# season_plot<-df_modobs %>%
#   mutate(doy = lubridate::yday(date)) %>%
#   group_by(classid, doy) %>%
#   summarise(obs = mean(gpp_obs, na.rm = TRUE),
#             mod_old_ori=mean(gpp_mod_old_ori, na.rm = TRUE),
#             mod_recent_ori=mean(gpp_mod_recent_ori, na.rm = TRUE),
#             mod_recent_optim=mean(gpp_mod_recent_optim,na.rm = TRUE)) %>%
#   pivot_longer(c(obs,mod_old_ori,mod_recent_ori,mod_recent_optim), names_to = "Source", values_to = "gpp") %>%
#   ggplot(aes(doy, gpp, color = Source)) +
#   geom_line() +
#   scale_color_manual(values = c("mod_old_ori" = "red","mod_recent_ori"="steelblue2",
#                                 "mod_recent_optim" = "orange", "obs" = "black"),
#                      labels = c("Old P-model","Recent Ori P-model", "Recent Optim P-model","Obs.")) +
#   labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
#        x = "Day of year") +
#   annotate(geom="text",x=200,y=2,label="")+
#   facet_wrap(~classid)
#update using original p-model
##
nsites<-df_modobs %>%
group_by(classid)%>%
dplyr::summarise(nsite=length(unique(sitename)))
nsites$label<-paste0("N = ",nsites$nsite)
sites_num.info<-data.frame(
doy=rep(20,nrow(nsites)),
gpp=rep(14,nrow(nsites)),
nsites
)
#
season_plot<-df_modobs %>%
mutate(doy = lubridate::yday(date)) %>%
group_by(classid, doy) %>%
dplyr::summarise(obs = mean(gpp_obs, na.rm = TRUE),
mod_old_ori=mean(gpp_mod_old_ori, na.rm = TRUE),
mod_recent_ori=mean(gpp_mod_recent_ori, na.rm = TRUE),
mod_recent_optim=mean(gpp_mod_recent_optim,na.rm = TRUE)) %>%
pivot_longer(c(obs,mod_old_ori,mod_recent_optim), names_to = "Source", values_to = "gpp") %>%
ggplot(aes(doy, gpp, color = Source)) +
geom_line() +
scale_color_manual("GPP sources",values = c("mod_old_ori" = "tomato",
"mod_recent_optim" = "steelblue2", "obs" = "gray4"),
labels = c("Orig. P-model", "Cali. P-model","Observations")) +
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
# annotate(geom="text",x=200,y=2,label="")+
facet_wrap(~classid)+
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
legend.position = "bottom"
)
#print the plot
tag_facet <- function(p, open = "", close = "", tag_pool = letters, x = -Inf, y = Inf,
hjust = -0.5, vjust = 1.5, fontface = 2, family = "", ...) {
gb <- ggplot_build(p)
lay <- gb$layout$layout
tags <- cbind(lay, label = paste0(open, tag_pool[lay$PANEL], close), x = x, y = y)
p + geom_text(data = tags, aes_string(x = "x", y = "y", label = "label"), ..., hjust = hjust,
vjust = vjust, fontface = fontface, family = family, inherit.aes = FALSE)
}
library(egg)
season_plot_new<-tag_facet(season_plot,x=sites_num.info$doy,y=sites_num.info$gpp,
tag_pool = sites_num.info$label,size=5)
# annotate(geom = "text",x=sites_num.info$x,
#          y=sites_num.info$y,label=sites_num.info$label)
#save the plot
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"FigureS_pmodel_vs_obs_forPFTs_fT.png"),season_plot,width = 15,height = 10)
#--------------------------------------------------------------
#(5) compare the gpp_obs, ori modelled gpp, and gpp modelled using optimated parameters
#--------------------------------------------------------------
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_PFTs.rds"))
par_PFTs
##---------------------------------------
#Aim: To compare the parameters among different groups(e.g.PFTs) after calibrating
#parameters for each site
##---------------------------------------
library(dplyr)
devtools::load_all("D:/Github/rbeni/")
library(rbeni) #-->make the evaluation plot
library(tidyverse)
library(cowplot)
library(grid)
library(ggpubr)
#---------------------------
#(1)load the calibrated parameters for each site
#---------------------------
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite.rds"))
#merge the parameters:
merge_pars<-c()
sites<-names(par_mutisites)
for(i in 1:length(par_mutisites)){
temp<-t(as.data.frame(par_mutisites[i]))
merge_pars<-rbind(merge_pars,temp)
}
pars_final<-as.data.frame(t(merge_pars))
names(pars_final)<-sites
View(pars_final)
names(pars_final)
View(pars_final)
#change the parameters name:
rownames(pars_final)<-c("tau","X0","Smax","k")
#----------------------------
#(2)load original data(meteos, gpp..)
#----------------------------
#load the data uploaded by Koen
df_recent <- readRDS(paste0("./data-raw/raw_data/P_model_output/model_data.rds")) %>%
mutate(
year = format(date, "%Y")
) %>%
na.omit()
#load the PFTs information:
#load the modis data-->tidy from Beni
#read_rds from tidyverse
load(paste0("./data-raw/raw_data/sites_info/","Pre_selected_sites_info.RDA"))
sites.info<-df_sites_sel
#----
#merge the data
#-----
df_merge<-left_join(df_recent,sites.info,by="sitename")
df_merge$year<-as.numeric(df_merge$year)
#load the data Beni sent me before:
df_old<-read.csv(file=paste0("./data-raw/raw_data/Data_sent_by_Beni/","ddf_fluxnet2015_pmodel_with_forcings_stocker19gmd.csv"))
df_old<-df_old %>%
mutate(date=lubridate::mdy(date),
year=lubridate::year(date)) %>%
na.omit(gpp_obs)
#----
#merge data:
#----
df_merge_new<-left_join(df_merge,df_old,by=c("sitename", "date", "year"))
#-----------
#summarize the meteos for each site
#-----------
df_sum_yearly_1<-df_merge_new %>%
group_by(sitename,year) %>%
dplyr::summarise(temp=mean(temp),
prec=sum(prec),
vpd=mean(vpd),
ppdf=mean(ppfd),
elv=mean(elv),
tmin=mean(tmin),
tmax=mean(tmax),
fapar_itpl=mean(fapar_itpl),
fapar_spl=mean(fapar_spl)
)
df_sum_yearly_2<-df_merge_new %>%
group_by(sitename,year) %>%
dplyr::summarise(lon=unique(lon),
lat=unique(lat),
classid=unique(classid),
koeppen_code=unique(koeppen_code))
df_sum_yearly<-left_join(df_sum_yearly_1,df_sum_yearly_2)
df_sum_yearly
#---
#summary site-years for site
#---
df_sum_1<-df_sum_yearly %>%
group_by(sitename) %>%
summarise_at(vars(temp:fapar_spl),mean,na.rm=T)
df_sum_2<-df_sum_yearly %>%
group_by(sitename) %>%
dplyr::summarise(lon=unique(lon),
lat=unique(lat),
classid=unique(classid),
koeppen_code=unique(koeppen_code))
df_sum<-left_join(df_sum_1,df_sum_2)
df_sum
##-----------------------
#(3) compare the parameter difference in differnt group
##----------------------
df_sum$Clim.PFTs<-paste0(df_sum$koeppen_code,"-",df_sum$classid)
#only target the sites we used for the analysis:
##---------------------
#A.load the event_length data-->the sites we were used
#---------------------
load.path<-"./data/event_length/"
load(paste0(load.path,"df_events_length.RDA"))
#
used_sites<-unique(df_events_all$sitename)
#-----select the data for thoses used sites----
#delete the sites do not used:
df_final<-df_sum %>%
filter(sitename %in% used_sites)
View(df_final)
names(df_final)
rownames(pars_final)
#--------------------------
#(4)plotting:
#--------------------------
#first merge the parameters with meteos:
pars_final<-as.data.frame(t(pars_final))
View(pars_final)
pars_final$sitename<-rownames(pars_final)
View(pars_final)
#merge:
df_final_new<-left_join(df_final,pars_final,by="sitename")
View(df_final_new)
head(pars_final)
#---
#check the variables distribution and boxplots
#---
vars.names<-c("tau","X0","Smax","k")
for (i in 1:length(vars.names)) {
hist(as.numeric(unlist(df_final_new[,vars.names[i]])),xlab = vars.names[i])
}
names(df_final_new)
df_final_new %>%
select(sitename,classid,tau:k)%>%
pivot_longer(c(a1:k),names_to = "parameter",values_to = "parameter_value")
df_final_new %>%
select(sitename,classid,tau:k)%>%
pivot_longer(c(tau:k),names_to = "parameter",values_to = "parameter_value")
##----------boxplot---------------------
#a. first for site-level parameters
data_sel_sites<-df_final_new %>%
select(sitename,classid,tau:k)%>%
pivot_longer(c(tau:k),names_to = "parameter",values_to = "parameter_value")
#only focus on the tau,X0,Smax
data_sel_sites<-data_sel_sites %>%
filter(parameter %in% c("tau","X0","Smax"))%>%
mutate(PFT=classid,
classid=NULL)
data_sel_sites$flag=rep("site",nrow(data_sel_sites))
#
data_sel_sites$parameter<-factor(data_sel_sites$parameter,
levels = c("tau","X0","Smax"))
data_sel_sites
#-----------
#b.also load the parameters for diff PFTs:
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_PFTs.rds"))
paras_PFTs<-data.frame(DBF=par_PFTs$DBF,
MF=par_PFTs$MF,
EN=par_PFTs$ENF)
paras_PFTs<-as.data.frame(t(paras_PFTs))
paras_PFTs
paras_PFTs$PFT<-c("DBF","MF","ENF")
#also change the parameters names:
names(paras_PFTs)<-c("tau","X0","Smax","k","PFT")
paras_PFTs
#
data_sel_PFTs<-paras_PFTs %>%
select(tau:Smax,PFT)%>%
pivot_longer(c(tau,X0,Smax),names_to = "parameter",values_to = "parameter_value")
data_sel_PFTs$flag=rep("PFT",nrow(data_sel_PFTs))
data_sel_PFTs
#
data_sel_PFTs$parameter<-factor(data_sel_PFTs$parameter,
levels = c("tau","X0","Smax"))
#c.load the parameters for diff Clim-PFTs:
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_Clim_andPFTs.rds"))
#
paras_Clim_PFTs<-c()
N<-length(names(par_Clim_PFTs))
for(i in 1:N){
temp<-t(as.data.frame(par_Clim_PFTs[i]))
paras_Clim_PFTs<-rbind(paras_Clim_PFTs,temp)
}
paras_Clim_PFTs<-as.data.frame(paras_Clim_PFTs)
paras_Clim_PFTs
names(paras_Clim_PFTs)<-c("tau","X0","Smax","k")
#
paras_Clim_PFTs$Clim_PFTs<-names(par_Clim_PFTs)
#
data_sel_Clim_PFTs<-paras_Clim_PFTs %>%
select(tau:Smax,Clim_PFTs)%>%
pivot_longer(c(tau,X0,Smax),names_to = "parameter",values_to = "parameter_value")
data_sel_Clim_PFTs$flag=rep("Clim-PFT",nrow(data_sel_Clim_PFTs))
#########################
#merge site and PFTs data
data_sel_final<-bind_rows(data_sel_sites,data_sel_PFTs)
data_sel_final<-bind_rows(data_sel_final,data_sel_Clim_PFTs)
#box plot with gitter
data_sel_final$PFT<-factor(data_sel_final$PFT,levels = c("DBF","MF","ENF"))
ggplot(data=data_sel_final[data_sel_final$flag=="site",],aes(x=parameter,y=parameter_value,fill=PFT,col=PFT))+
geom_point(position = position_jitterdodge())+
geom_boxplot(alpha=0.6)+
xlab("")+
facet_wrap(~parameter,scales = "free",nrow = 3)+
xlab("Parameters")+
ylab("")+
theme_bw()+
theme(legend.position = c(0.75,0.18),
legend.background = element_blank(),
legend.title = element_text(size=24),
legend.text = element_text(size=22),
axis.title = element_text(size=24),
axis.text.y = element_text(size=22),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 22)) ##change the facet label size
para_sites<-ggplot(data=data_sel_final[data_sel_final$flag=="site",],aes(x=parameter,y=parameter_value,fill=PFT,col=PFT))+
geom_point(position = position_jitterdodge())+
geom_boxplot(alpha=0.6)+
xlab("")+
facet_wrap(~parameter,scales = "free",ncol = 3)+
xlab("Parameters")+
ylab("")+
theme_bw()+
theme(legend.position = c(0.75,0.18),
legend.background = element_blank(),
legend.title = element_text(size=24),
legend.text = element_text(size=22),
axis.title = element_text(size=24),
axis.text.y = element_text(size=22),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.x = element_text(size = 22)) ##change the facet label size
para_sites
#---------------------------------------------
tag_facet <- function(p, open = "", close = "", tag_pool = letters, x = -Inf, y = Inf,
hjust = "", vjust = "", fontface = 2, family = "", ...) {
# p<-para_sites
# x=paras_PFTs_new$x
# y=paras_PFTs_new$parameter_value
# open=""
# close=""
# tag_pool=paras_PFTs_new$label
gb <- ggplot_build(p)
lay <- gb$layout$layout
tags <- cbind(lay, label = paste0(open, tag_pool[lay$PANEL], close), x = x, y = y)
p + geom_text(data = tags, aes_string(x = "x", y = "y", label = "label"), ..., hjust = hjust,
vjust = vjust, fontface = fontface, family = family, inherit.aes = FALSE)
}
library(egg)
##add the PFTs parameters onto each panel:
paras_PFTs_new<-data_sel_final[data_sel_final$flag=="PFT",-1]
paras_PFTs_new$x<-rep(NA,nrow(paras_PFTs_new))
paras_PFTs_new[paras_PFTs_new$PFT=="MF",]$x<-1
paras_PFTs_new[paras_PFTs_new$PFT=="DBF",]$x<-0.75
paras_PFTs_new[paras_PFTs_new$PFT=="ENF",]$x<-1.25
##
paras_PFTs_new$label<-rep("*",nrow(paras_PFTs_new))
paras_PFTs_new$col<-c(rep("red",5),rep("forestgreen",5),rep("blue",5))
install.packages("dplR")
library(dplR)
?pass.filt
