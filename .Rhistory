tag_facet <- function(p, open = "", close = "", tag_pool = letters, x = -Inf, y = Inf,
hjust = -0.5, vjust = 1.5, fontface = 2, family = "", ...) {
gb <- ggplot_build(p)
lay <- gb$layout$layout
tags <- cbind(lay, label = paste0(open, tag_pool[lay$PANEL], close), x = x, y = y)
p + geom_text(data = tags, aes_string(x = "x", y = "y", label = "label"), ..., hjust = hjust,
vjust = vjust, fontface = fontface, family = family, inherit.aes = FALSE)
}
library(egg)
season_plot_new<-tag_facet(season_plot,x=sites_num.info$doy,y=sites_num.info$gpp,
tag_pool = sites_num.info$label,size=5)
season_plot_new
# annotate(geom = "text",x=sites_num.info$x,
#          y=sites_num.info$y,label=sites_num.info$label)
#save the plot
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"FigureS_pmodel_vs_obs_forPFTs_fT_202211.png"),season_plot,width = 15,height = 10)
#
season_plot<-df_modobs %>%
mutate(doy = lubridate::yday(date)) %>%
group_by(classid, doy) %>%
dplyr::summarise(obs = mean(gpp_obs, na.rm = TRUE),
mod_old_ori=mean(gpp_mod_old_ori, na.rm = TRUE),
mod_recent_ori=mean(gpp_mod_recent_ori, na.rm = TRUE),
mod_recent_optim=mean(gpp_mod_recent_optim,na.rm = TRUE)) %>%
pivot_longer(c(obs,mod_old_ori,mod_recent_optim), names_to = "Source", values_to = "gpp") %>%
ggplot(aes(doy, gpp, color = Source)) +
geom_line() +
scale_color_manual("GPP sources",values = c("mod_old_ori" = "tomato",
"mod_recent_optim" = "steelblue2", "obs" = "gray4"),
# labels = c("Orig. P-model", "Cali. P-model","Observations")) +
labels=c(expression(GPP[Pmodel]),expression(GPP[adj]),expression(GPP[obs])))+  ##updated in Nov,2022
labs(y = expression( paste("GPP (g C m"^-2, " d"^-1, ")" ) ),
x = "DoY") +
# annotate(geom="text",x=200,y=2,label="")+
facet_wrap(~classid)+
theme(
legend.text = element_text(size=20),
legend.key.size = unit(2, 'lines'),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour ="grey",fill="white"),
legend.position = "bottom",
# legend.position = c(0.75,0.1)
)+
theme(legend.text.align = 0)  #align the legend (all the letter start at the same positoin)
#print the plot
tag_facet <- function(p, open = "", close = "", tag_pool = letters, x = -Inf, y = Inf,
hjust = -0.5, vjust = 1.5, fontface = 2, family = "", ...) {
gb <- ggplot_build(p)
lay <- gb$layout$layout
tags <- cbind(lay, label = paste0(open, tag_pool[lay$PANEL], close), x = x, y = y)
p + geom_text(data = tags, aes_string(x = "x", y = "y", label = "label"), ..., hjust = hjust,
vjust = vjust, fontface = fontface, family = family, inherit.aes = FALSE)
}
library(egg)
season_plot_new<-tag_facet(season_plot,x=sites_num.info$doy,y=sites_num.info$gpp,
tag_pool = sites_num.info$label,size=5)
# annotate(geom = "text",x=sites_num.info$x,
#          y=sites_num.info$y,label=sites_num.info$label)
#save the plot
save.path<-"./manuscript/figures/"
ggsave(paste0(save.path,"FigureS_pmodel_vs_obs_forPFTs_fT_202211.png"),season_plot,width = 15,height = 10)
#################################################
#Aim:to evaluate the model performances with the parameters from the model
#calibrated on the different scale
#(each site(site-level), PFT scale(PFT-level), pool all the sites together(All sites-level))
#################################################
library(dplyr)
library(lubridate)
library(ggplot2)
library(tidyr)
library(lme4)
library(tidyverse)
# remotes::install_github("computationales/ingestr") #install the package
library(ingestr)
devtools::load_all("D:/Github/rbeni/")
library(rbeni)
#-------------------------
#(1)load the data and hardening funciton
#-------------------------
#####
#load the data uploaded by Koen
df_recent <- readRDS(paste0("./data-raw/raw_data/P_model_output/model_data.rds")) %>%
mutate(
year = format(date, "%Y")
) %>%
na.omit()
#load the data Beni sent me before:
df_old<-read.csv(file=paste0("./data-raw/raw_data/Data_sent_by_Beni/","ddf_fluxnet2015_pmodel_with_forcings_stocker19gmd.csv"))
df_old<-df_old %>%
mutate(date=lubridate::mdy(date),
year=lubridate::year(date)) %>%
na.omit(gpp_obs)
#load the temperature acclimation factor fT:
# source(paste0("./R/functions_in_model/model_hardening_byBeni_addbaseGDD_rev.R"))
source(paste0("./R/functions_in_model/newly_formulated_fun/model_fT_rev.R"))
#--------------------------------------------------------------
#(2) retreive the optimized parameter for the sites
#--------------------------------------------------------------
# set initial value
par <- c("tau"=5,"X0"=-10,"Smax"=5,"k"=1)
#
lower=c(1,-10,5,0)
upper=c(25,10,25,2)
# run model and compare to true values
# returns the RMSE
cost <- function(
data,
par
) {
scaling_factor <- data %>%
# group_by(sitename) %>%
do({
scaling_factor <- f_Ts_rev(
.,
par
)
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor = scaling_factor
)
})
df <- left_join(data, scaling_factor)
#rmse
# rmse <- sqrt(
#   sum(
#     (df$gpp - df$gpp_mod * df$scaling_factor)^2)
#   )/nrow(df)
#mse:mean square error
mse<-mean((df$gpp - df$gpp_mod * df$scaling_factor)^2,na.rm=T)
return(mse)
}
#--------------------------------------------------------------
#(3) parameters optimization (for site-level, PFT-level, and All-sites level)
#--------------------------------------------------------------
#a.adding the PFTs information for site-->load the modis data-->tidy from Beni
load(paste0("./data-raw/raw_data/sites_info/","Pre_selected_sites_info.RDA"))
sites.info<-df_sites_sel
#
df_merge<-df_recent %>%
left_join(
sites.info,
by = "sitename"
)
##adding day of the year
df_merge$doy<-yday(df_merge$date)
#main Clim-PFTs
df_merge$Clim_PFTs<-paste0(df_merge$koeppen_code,"-",df_merge$classid)
Clim.PFTs<-sort(unique(df_merge$Clim_PFTs))
#------------------------------------------
#b.normalized the GPP-->for each site,
#normalized the "gpp" and "gpp_mod" through their 90 percentiles
#------------------------------------------
#I should use the same value to normlize the gpp and gpp_mod:
gpp_P95<-df_merge %>%
group_by(sitename) %>%
dplyr::summarise(gpp_norm_p95=quantile(c(gpp,gpp_mod),0.95,na.rm=T))
#
df_merge.new<-left_join(df_merge,gpp_P95,by="sitename")
df_merge.new<-df_merge.new %>%
mutate(gpp=gpp/gpp_norm_p95,gpp_mod=gpp_mod/gpp_norm_p95)
# need to remove the sites that do not used in this analysis:
rm.sites<-c("BE-Bra","CA-SF1","CA-SF2","FI-Sod","US-Wi4")
df_merge_new<-df_merge.new %>%
filter(sitename!=rm.sites[1] & sitename!=rm.sites[2]&sitename!=rm.sites[3]&sitename!=rm.sites[4]&sitename!=rm.sites[5])
#--------------------------------------------------------------
#(4) compare the gpp_obs, ori modelled gpp, and gpp modelled
# using optimated parameters calibrated on different scale(for site-level, PFT-level, and All-sites level)
#--------------------------------------------------------------
#---a.load the optimized parameters from different scales
# site-level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite.rds"))
#--------------------------------------------------------------
#(4) compare the gpp_obs, ori modelled gpp, and gpp modelled
# using optimated parameters calibrated on different scale(for site-level, PFT-level, and All-sites level)
#--------------------------------------------------------------
#---a.load the optimized parameters from different scales
# site-level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_eachsite.rds"))
#PFT-level
# load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_PFTs.rds"))
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_PFTs_with_newMF_paras.rds"))
#All-sites level
load(paste0("./data/model_parameters/parameters_MAE_newfT/","optim_par_run5000_allsites.rds"))
#---b.retrieve the stress factor(calibration factor) for each scale-level
#--------
#for optimized paramater from site-level calibration:
#--------
sel_sites<-unique(df_merge_new$sitename)
df_final_sitelevel<-c()
for (i in 1:length(sel_sites)) {
df_sel<-df_merge_new %>%
dplyr::filter(sitename==sel_sites[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_mutisites[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_sitelevel<-rbind(df_final_sitelevel,df_sel)
}
#--------
#for optimized paramater from PFT-level calibration:
#--------
PFTs<-unique(df_merge_new$classid)
df_final_PFTlevel<-c()
for (i in 1:length(PFTs)) {
df_sel<-df_merge_new %>%
dplyr::filter(classid==PFTs[i])
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_PFTs[[i]])
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel_new <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_PFTlevel<-rbind(df_final_PFTlevel,df_sel_new)
}
#--------
#for optimized paramater from All sites-level calibration:
#--------
df_final_Allsiteslevel<-c()
#
df_sel<-df_merge_new
scaling_factors <- df_sel %>%
# group_by(sitename, year) %>%
do({
scaling_factor <- f_Ts_rev(.,par_allsites)
data.frame(
sitename = .$sitename,
date = .$date,
scaling_factor_optim = scaling_factor
)
})
df_sel_new <- left_join(df_sel, scaling_factors)
#merge different sites:
df_final_Allsiteslevel<-df_sel_new
#-----------------------------
#---c.need to back-convert the normalized gpp to gpp
#-----------------------------
#for site-level:
df_final_sitelevel_new<-df_final_sitelevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_sitelevel<-left_join(df_final_sitelevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#for PFT-level:
df_final_PFTlevel_new<-df_final_PFTlevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_PFTlevel<-left_join(df_final_PFTlevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#for Allsites-level:
df_final_Allsiteslevel_new<-df_final_Allsiteslevel %>%
mutate(gpp=gpp*gpp_norm_p95,
gpp_mod=gpp_mod*gpp_norm_p95,
year=year(date))
df_merge_Allsiteslevel<-left_join(df_final_Allsiteslevel_new,df_old,by = c("sitename", "date", "year")) %>%
mutate(gpp_obs_recent=gpp,
gpp_obs_old=gpp_obs,
gpp_mod_FULL_ori=gpp_mod_FULL,
gpp_mod_recent_ori=gpp_mod,
gpp_mod_recent_optim=gpp_mod*scaling_factor_optim,
gpp=NULL,
gpp_obs=NULL,
gpp_mod=NULL)
#--------------------------
#(5).making the evaluation plots:
#using modelled and observed gpp to make the plots
#-------------------------
library(cowplot)
###############################
#---a.making scatter plots:evaluation for all sites (GPP_obs vs GPP_adj(with optimized paras))
###############################
#for the site-level comparision(pooled all sites for this scatter plot):
df_modobs_sitelevel<-df_merge_sitelevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
#
plot_gpp_modobs_sitelevel<-df_modobs_sitelevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
plot_gpp_modobs_sitelevel
#for the PFT-level comparision(pooled all sites for this scatter plot):
df_modobs_PFTlevel<-df_merge_PFTlevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
#
plot_gpp_modobs_PFTlevel<-df_modobs_PFTlevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
plot_gpp_modobs_PFTlevel
#for the Allsites-level comparision(pooled all sites for this scatter plot):
df_modobs_Allsiteslevel<-df_merge_Allsiteslevel%>%
select(sitename,date,gpp_obs_recent,gpp_mod_FULL_ori,gpp_mod_recent_ori,gpp_mod_recent_optim)%>%
mutate(gpp_obs=gpp_obs_recent,
gpp_mod_old_ori=gpp_mod_FULL_ori,             #gpp_mod_old_ori-->corrsponds to Stocker et al., 2022
gpp_mod_recent_ori=gpp_mod_recent_ori,        #gpp_mod_recent_ori-->updated GPP from Beni
gpp_mod_recent_optim=gpp_mod_recent_optim) %>%#gpp_mod_recent_optim-->updated GPP calibrated with paras
mutate(gpp_obs_recent=NULL,
gpp_mod_FULL_ori=NULL)
#
plot_gpp_modobs_Allsiteslevel<-df_modobs_Allsiteslevel %>%
analyse_modobs2("gpp_mod_recent_optim", "gpp_obs", type = "heat")
plot_gpp_modobs_Allsiteslevel
library(sirad)
stats_sitelevel_allsitespooled<-round(unlist(modeval(df_merge_sitelevel$gpp_mod_recent_optim,
df_merge_sitelevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
stats_PFTlevel_allsitespooled<-round(unlist(modeval(df_merge_PFTlevel$gpp_mod_recent_optim,
df_merge_PFTlevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
stats_Allsitelevel_allsitespooled<-round(unlist(modeval(df_merge_Allsiteslevel$gpp_mod_recent_optim,
df_merge_Allsiteslevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
stats_sitelevel_allsitespooled
stats_PFTlevel_allsitespooled
stats_Allsitelevel_allsitespooled
#---
#change x,y axis labels
#---
plot.theme<-theme(
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20),
text = element_text(size=24)
)
plot_gpp_modobs_sitelevel$gg<-plot_gpp_modobs_sitelevel$gg+
# xlab("")+
ylab("")+
xlab(expression("GPP"[adj]*" (g C m"^-2*"d"^-1*")"))+
ylab(expression("GPP"[obs]*" (g C m"^-2*"d"^-1*")"))+
xlim(0,25)+ylim(-5,25)+
annotate(geom="text",x=20,y=0,label="site-specific paras",size=6)+
plot.theme
plot_gpp_modobs_PFTlevel$gg<-plot_gpp_modobs_PFTlevel$gg+
# xlab("")+
xlab(expression("GPP"[adj]*" (g C m"^-2*"d"^-1*")"))+
ylab(expression("GPP"[obs]*" (g C m"^-2*"d"^-1*")"))+
xlim(0,25)+ylim(-5,25)+
annotate(geom="text",x=20,y=0,label="PFT-specific paras",size=6)+
plot.theme
plot_gpp_modobs_Allsiteslevel$gg<-plot_gpp_modobs_Allsiteslevel$gg+
xlab("")+
ylab("")+
xlab(expression("GPP"[adj]*" (g C m"^-2*"d"^-1*")"))+
ylab(expression("GPP"[obs]*" (g C m"^-2*"d"^-1*")"))+
xlim(0,25)+ylim(-5,25)+
annotate(geom="text",x=20,y=0,label="One general paras",size=6)+
plot.theme
#merge the plots
evaulation_merge_plot<-plot_grid(plot_gpp_modobs_sitelevel$gg,
plot_gpp_modobs_PFTlevel$gg,plot_gpp_modobs_Allsiteslevel$gg,
widths=15,heights=4,
labels = "auto",ncol =3,nrow = 1,label_size = 12,align = "hv")
evaulation_merge_plot
###############################
#---b.RMSE and R2 for eval performance (display for different scales)
###############################
library(sirad)
#function#
stat_fun<-function(df,paras_level){
# df<-df_merge_sitelevel
# paras_level<-"site"
#
df.stat<-df %>%
select(sitename,date,Clim_PFTs,gpp_mod_recent_optim,gpp_obs_recent)%>%
dplyr::mutate(gpp_adj=gpp_mod_recent_optim,gpp_mod_recent_optim=NULL,
gpp_obs=gpp_obs_recent,gpp_obs_recent=NULL)%>%
group_by(Clim_PFTs)%>%
dplyr::summarise(N=as.numeric(unlist(modeval(gpp_adj,gpp_obs,stat = "N"))),
Rsquare=as.numeric(unlist(modeval(gpp_adj,gpp_obs,stat = "R2"))),
MAE=as.numeric(unlist(modeval(gpp_adj,gpp_obs,stat="MAE"))),
RMSE=as.numeric(unlist(modeval(gpp_adj,gpp_obs,stat="RMSE"))))%>%
mutate(para_flag=paras_level)
return(df.stat)
}
#for the parameters is calibrated for site-level(RMSE,R2 for each sites)
#evaluation on the PFT-Clim categories
stats_para_f_site<-stat_fun(df_merge_sitelevel,"site-specific")
#for the parameters is calibrated for PFT-level
#evaluation on the PFT-Clim categories
stats_para_f_PFT<-stat_fun(df_merge_PFTlevel,"PFT-specific")
#for the parameters is calibrated for Allsites-level(general)
#evaluation on the PFT-Clim categories
stats_para_f_Allsites<-stat_fun(df_merge_Allsiteslevel,"general")
stats_para_f_Allsites
####summary the stats:
stats_all<-rbind(rbind(stats_para_f_site,stats_para_f_PFT),stats_para_f_Allsites)
stats_all_tidy<-stats_all %>%
select(Clim_PFTs,Rsquare,MAE,RMSE,para_flag)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")
#set the order:
stats_all_tidy$para_flag<-factor(stats_all_tidy$para_flag,
levels = c("site-specific","PFT-specific","general"))
#sum for all Clim_PFTs groups
stats_all_tidy_sum<-stats_all_tidy %>%
group_by(para_flag,eval_metrics) %>%
dplyr::summarise(metrics_mean=mean(metrics),SD=sd(metrics))
stats_all_tidy_sum
##additional-->calculate the stats
library(sirad)
stats_sitelevel_allsitespooled<-round(unlist(modeval(df_merge_sitelevel$gpp_mod_recent_optim,
df_merge_sitelevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
stats_PFTlevel_allsitespooled<-round(unlist(modeval(df_merge_PFTlevel$gpp_mod_recent_optim,
df_merge_PFTlevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
stats_Allsitelevel_allsitespooled<-round(unlist(modeval(df_merge_Allsiteslevel$gpp_mod_recent_optim,
df_merge_Allsiteslevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
names(df_merge_sitelevel)
round(unlist(modeval(df_merge_Allsiteslevel$gpp_mod_FULL_ori,
df_merge_Allsiteslevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
round(unlist(modeval(df_merge_sitelevel$gpp_mod_FULL_ori,
df_merge_sitelevel$gpp_obs_recent,stat = c("MAE","RMSE","R2"))),2)
names(df_merge_sitelevel)
names(df_merge_Allsiteslevel)
df_merge_Allsiteslevel%>%
select(sitename,date,Clim_PFTs,gpp_mod_FULL_ori,gpp_obs_recent)%>%
dplyr::mutate(gpp_pmodel=gpp_mod_FULL_ori,gpp_mod_FULL_ori=NULL,
gpp_obs=gpp_obs_recent,gpp_obs_recent=NULL)%>%
group_by(Clim_PFTs)
df_merge_Allsiteslevel%>%
select(sitename,date,Clim_PFTs,gpp_mod_FULL_ori,gpp_obs_recent)%>%
dplyr::mutate(gpp_pmodel=gpp_mod_FULL_ori,gpp_mod_FULL_ori=NULL,
gpp_obs=gpp_obs_recent,gpp_obs_recent=NULL)%>%
group_by(Clim_PFTs)%>%
dplyr::summarise(N=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat = "N"))),
Rsquare=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat = "R2"))),
MAE=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat="MAE"))),
RMSE=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat="RMSE"))))
stats_prior_cali<-df_merge_Allsiteslevel%>%
select(sitename,date,Clim_PFTs,gpp_mod_FULL_ori,gpp_obs_recent)%>%
dplyr::mutate(gpp_pmodel=gpp_mod_FULL_ori,gpp_mod_FULL_ori=NULL,
gpp_obs=gpp_obs_recent,gpp_obs_recent=NULL)%>%
group_by(Clim_PFTs)%>%
dplyr::summarise(N=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat = "N"))),
Rsquare=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat = "R2"))),
MAE=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat="MAE"))),
RMSE=as.numeric(unlist(modeval(gpp_pmodel,gpp_obs,stat="RMSE"))))
stats_prior_cali
####summary the stats:
stats_all<-rbind(rbind(stats_para_f_site,stats_para_f_PFT),stats_para_f_Allsites)
stats_all_tidy<-stats_all %>%
select(Clim_PFTs,Rsquare,MAE,RMSE,para_flag)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")
#set the order:
stats_all_tidy$para_flag<-factor(stats_all_tidy$para_flag,
levels = c("site-specific","PFT-specific","general"))
stats_all_tidy
#sum for all Clim_PFTs groups
stats_all_tidy_sum<-stats_all_tidy %>%
group_by(para_flag,eval_metrics) %>%
dplyr::summarise(metrics_mean=mean(metrics),SD=sd(metrics))
stats_all_tidy_sum
stats_prior_cali%>%
select(Clim_PFTs,Rsquare,MAE,RMSE,para_flag)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")
stats_prior_cali%>%
select(Clim_PFTs,Rsquare,MAE,RMSE)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")
stats_prior_cali%>%
select(Clim_PFTs,Rsquare,MAE,RMSE)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")%>%
dplyr::summarise(metrics_mean=mean(metrics),SD=sd(metrics))
stats_prior_cali%>%
select(Clim_PFTs,Rsquare,MAE,RMSE)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")%>%
group_by(eval_metrics) %>%
dplyr::summarise(metrics_mean=mean(metrics),SD=sd(metrics))
stats_all_tidy_sum
stats_prior_cali%>%
select(Clim_PFTs,Rsquare,MAE,RMSE)%>%
pivot_longer(c(Rsquare,MAE,RMSE),names_to = "eval_metrics",values_to = "metrics")%>%
group_by(eval_metrics) %>%
dplyr::summarise(metrics_mean=mean(metrics),SD=sd(metrics))
par_PFTs
