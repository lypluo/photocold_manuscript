theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "lm")
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==sitename)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
####start to make the plots:
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "lm")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "lm")+
scale_color_viridis_d()
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "lm")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "lm")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point()+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
df<-df_all
sitename<-"US-UMB"
comp_var<-"temp_min_fluxnet2015"
var_unit<-"(degreeC)"
do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==sitename)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
rm(df.all)
df<-df_all
sitename<-"US-UMB"
comp_var<-"temp_min_fluxnet2015"
var_unit<-"(degreeC)"
do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==sitename)
df<-df_all
site<-"US-UMB"
comp_var<-"temp_min_fluxnet2015"
var_unit<-"(degreeC)"
do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==site)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
####start to make the plots:
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
####start to make the plots:
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=20),
axis.title = element_text(size=24),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
####start to make the plots:
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.text = element_text(size=18),
axis.title = element_text(size=28),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
####start to make the plots:
df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.title = element_text(size=24),
legend.text = element_text(size=18),
axis.title = element_text(size=20),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
#-------------------------------------------------------------------------
##(3).making the plots
#-------------------------------------------------------------------------
#prepare the plot function:
plot_2groups<-function(df,sitename,comp_var,var_unit,do_legend){
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
# var_unit<-"(degreeC)"
# do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==site)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
#x axis range
# x_range_event<-range(df.event_sel$doy)
# x_range_nonevent<-range(df.nonevent_sel$doy)
#
####start to make the plots:
p_plot<-df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.title = element_text(size=24),
legend.text = element_text(size=18),
axis.title = element_text(size=20),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
#legend
if(do_legend==FALSE){
p_plot<-p_plot+
theme(legend.position = "none")
}
# print(p_plot)
#returun object
return(p_plot)
}
plot_2groups(df_all,"US-UMB","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"RU-Fyo","temp_min_fluxnet2015","(degreeC)",TRUE)
#-------------------------------------------------------------------------
##(3).making the plots
#-------------------------------------------------------------------------
#prepare the plot function:
plot_2groups<-function(df,site,comp_var,var_unit,do_legend){
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
# var_unit<-"(degreeC)"
# do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==site)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
#x axis range
# x_range_event<-range(df.event_sel$doy)
# x_range_nonevent<-range(df.nonevent_sel$doy)
#
####start to make the plots:
p_plot<-df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "loess")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.title = element_text(size=24),
legend.text = element_text(size=18),
axis.title = element_text(size=20),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
#legend
if(do_legend==FALSE){
p_plot<-p_plot+
theme(legend.position = "none")
}
# print(p_plot)
#returun object
return(p_plot)
}
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"RU-Fyo","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"US-NR1","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"FI-Hyy","temp_min_fluxnet2015","(degreeC)",TRUE)
#-------------------------------------------------------------------------
##(3).making the plots
#-------------------------------------------------------------------------
#prepare the plot function:
plot_2groups<-function(df,site,comp_var,var_unit,do_legend){
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
# var_unit<-"(degreeC)"
# do_legend<-TRUE
#------------------------------------
#data tidy and select the relevant variables
#------------------------------------
df_sel<-df%>%
filter(sitename==site)
###
#selected the most relevant vars
#for the comparison,select the original variable if "do_norm"==FALSE,otherwise "do_norm"==TRUE
df.sel_temp<-df_sel[,c("sitename","Year","date","dday","gpp_res",comp_var)] #gpp_res:gpp_mod-gpp_obs
names(df.sel_temp)<-c("sitename","Year","date","dday","bias","comp_var")
##do the summary analysis to determine the orders of years that are overestimated:
summary.bias<-df.sel_temp %>%
filter(dday>=0)%>%
group_by(Year)%>%
dplyr::summarise(spring_bias=round(mean(bias,na.rm=T),3))
df.all<-left_join(df.sel_temp,summary.bias)
df.all$spring_bias<-as.factor(df.all$spring_bias)
#--------------------------------------
#plotting
#--------------------------------------
#y axis range:
ymin<-min(range(df.sel_temp$comp_var,na.rm = T))
ymax<-max(range(df.sel_temp$comp_var,na.rm = T))
#x axis range
# x_range_event<-range(df.event_sel$doy)
# x_range_nonevent<-range(df.nonevent_sel$doy)
#
####start to make the plots:
p_plot<-df.all%>%
ggplot(aes(x=dday,y=comp_var,col=spring_bias))+
geom_point(size=1)+
geom_smooth(se=FALSE,method = "lm")+
scale_color_viridis_d()+
ylab(paste0(comp_var," ",var_unit))+
xlab("gday")+
annotate("rect",xmin=0,xmax=70,ymin = -Inf,ymax = Inf,alpha=0.2)+
theme_classic()+
theme(legend.background = element_blank(),
legend.key.size = unit(2, 'lines'),
legend.title = element_text(size=24),
legend.text = element_text(size=18),
axis.title = element_text(size=20),
axis.text = element_text(size = 20))+
theme(legend.text.align = 0)+  #align the legend (all the letter start at the same positoin)
xlim(-60,70)  #add x range in 2021-09-25
#legend
if(do_legend==FALSE){
p_plot<-p_plot+
theme(legend.position = "none")
}
# print(p_plot)
#returun object
return(p_plot)
}
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"FI-Hyy","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"US-PFa","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"US-Syv","temp_min_fluxnet2015","(degreeC)",TRUE)
##
# df<-df_all
# site<-"US-UMB"
# comp_var<-"temp_min_fluxnet2015"
#
# do_legend<-TRUE
#DBF(US-UMB;RU-Fyo);ENF(US-NR1,FI-Hyy);MF(US-PFa,US-Syv)
plot_2groups(df_all,"US-Syv","temp_min_fluxnet2015","(degreeC)",TRUE)
